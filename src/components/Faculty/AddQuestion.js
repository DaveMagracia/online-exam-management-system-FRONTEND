import React, { useContext } from "react";
import css from "./css/AddExamQuestion.module.css";
import { UserContext } from "../../UserContext";
import { FaArrowCircleLeft } from "react-icons/fa";
import { MdWarning } from "react-icons/md";
import { Modal, Button } from "react-bootstrap";
import { useNavigate } from "react-router-dom";
//library to create unique ids for the questions
//NOTE: the uuid generated is only stored locally, it is different from the id on the database
//its purpose is to identify if the question already exists since
//once a question is submitted, it doesnt write immediately in the database
//only then the question will have the id generated by mongoose/mongoDB
import { v1 as createId } from "uuid";

//NOTE: this addQuestion component is used in adding an exam question and a question bank question
export default function AddQuestion(props) {
   const navigate = useNavigate();
   const { user, setUser } = useContext(UserContext);

   const [formData, setFormData] = React.useState({
      question: "",
      choice1: "",
      choice2: "",
      choice3: "",
      choice4: "",
      answer: "none",
      cpd: "none",
      kd: "none",
      points: 1,
   });

   const [errors, setErrors] = React.useState({
      question: false,
      choice1: false,
      choice2: false,
      choice3: false,
      choice4: false,
      answer: false,
      points: false,
      cpd: false,
      kd: false,
   });

   const [hasError, setHasError] = React.useState(false);
   const [isShownModal, setisShownModal] = React.useState(false);

   function handleFormChange(event) {
      const { name, value } = event.target;
      let hasError = Object.keys(errors).some((k) => errors[k] === true);

      if (!hasError) {
         setHasError(false);
      }
      //remove error on the field that was changed
      setErrors((prevVal) => ({
         ...prevVal,
         [name]: false,
      }));

      setFormData((prevVal) => ({
         ...prevVal,
         [name]: name === "answer" ? Number(value) : value, //if the answer field is changed, convert value from string to number
      }));
   }

   function handleTimeLimitInput(event) {
      //this function prevents user from inputting 0 or negative values
      //if input is below 1, set input value to 1
      const { value } = event.target;
      const absValue = Math.abs(value);

      setFormData((prevVal) => {
         let finalPoints = 1;
         finalPoints = !!value && absValue >= 1 ? absValue : "";

         return {
            ...prevVal,
            points: finalPoints,
         };
      });
   }

   function backToCreateExam() {
      if (checkEmptyFields()) setisShownModal(true);
      else props.setisAddingQuestion(false);
   }

   function checkEmptyFields() {
      let isEmpty = { ...errors };

      isEmpty.question = formData.question ? false : true;
      isEmpty.choice1 = formData.choice1 ? false : true;
      isEmpty.choice2 = formData.choice2 ? false : true;
      isEmpty.choice3 = formData.choice3 ? false : true;
      isEmpty.choice4 = formData.choice4 ? false : true;
      isEmpty.points = formData.points === 1;
      isEmpty.answer = formData.answer === "none";
      isEmpty.cpd = formData.cpd === "none";
      isEmpty.kd = formData.kd === "none";

      let hasEmpty_ = Object.keys(isEmpty).some((k) => isEmpty[k] === false);

      return hasEmpty_;
   }

   function validateForm() {
      let tempErrors = { ...errors };

      tempErrors.question = formData.question ? false : true;
      tempErrors.choice1 = formData.choice1 ? false : true;
      tempErrors.choice2 = formData.choice2 ? false : true;
      tempErrors.choice3 = formData.choice3 ? false : true;
      tempErrors.choice4 = formData.choice4 ? false : true;
      tempErrors.answer = formData.answer === "none";
      tempErrors.points = !formData.points || formData.points === "0";
      tempErrors.cpd = formData.cpd === "none";
      tempErrors.kd = formData.kd === "none";

      let hasError_ = Object.keys(tempErrors).some(
         (k) => tempErrors[k] === true
      );

      setErrors(tempErrors);
      setHasError(hasError_);

      if (hasError_) {
         return false;
      }

      return true;
   }

   function upsert(array, item) {
      //this function identifies if the item being pushed already exists.
      //if it doesnt exist, push value to array
      //else, update the existing value
      const i = array.findIndex((_item) => _item.localId === item.localId);
      if (i > -1) array[i] = item;
      else array.push(item);

      return array;
   }

   function submitQuestion(event) {
      event.preventDefault();

      if (validateForm()) {
         //add question to the "question" state
         props.setQuestions((prevVal) => {
            //note: see upsert function
            return upsert(prevVal, {
               localId: props.currentQuestion
                  ? props.currentQuestion.localId
                  : createId(),
               question: formData.question,
               choice1: formData.choice1,
               choice2: formData.choice2,
               choice3: formData.choice3,
               choice4: formData.choice4,
               answer: formData.answer,
               cpd: formData.cpd,
               kd: formData.kd,
               points: formData.points,
            });
         });

         props.setisAddingQuestion(false);
      }
   }

   function handleModalClose() {
      setisShownModal(false);
   }

   function errorHelper() {
      //element for error text
      //to save space
      return <small className="text-danger">This field is required</small>;
   }

   function errorAddOn() {
      //element for error addOn
      return (
         <span className={`${css.error_addon} input-group-text`}>
            <MdWarning />
         </span>
      );
   }

   //the useEffects are used for setting the user context.
   //this fixes the problem where the user context is lost for everytime the page is reloaded
   React.useEffect(() => {
      if (!localStorage.getItem("token")) {
         navigate("/login");
      } else {
         let currentQuestion = props.currentQuestion;
         if (props.currentQuestion) {
            setFormData({
               question: currentQuestion.question,
               choice1: currentQuestion.choice1,
               choice2: currentQuestion.choice2,
               choice3: currentQuestion.choice3,
               choice4: currentQuestion.choice4,
               answer: currentQuestion.answer,
               cpd: currentQuestion.cpd,
               kd: currentQuestion.kd,
               points: currentQuestion.points,
            });
         }
      }
   }, []);

   React.useEffect(() => {
      //this if block finds the first field that has an error
      //if found, then scroll to that element
      if (hasError) {
         let element = "";
         for (let key in errors) {
            if (errors[key]) {
               element = key;
               break;
            }
         }

         let firstError = document.getElementsByName(element)[0];

         if (firstError) {
            firstError.scrollIntoView({
               behavior: "smooth",
               block: "center",
               inline: "start",
            });
         }
      }
   });

   return (
      <>
         <div>
            {/* <FacultyNavbar username={user ? user.username : ""} /> */}
            <div className="container">
               <div className="d-flex align-items-center mt-5">
                  <FaArrowCircleLeft
                     size={"35px"}
                     className={`text-primary ${css.back_arrow}`}
                     onClick={backToCreateExam}
                  />
                  <h1 className="ms-3 d-inline">Add a Question</h1>
               </div>

               <form onSubmit={submitQuestion}>
                  {/* TITLE INPUT */}
                  <div className="form-floating mt-4">
                     <textarea
                        id="questionTextArea"
                        name="question"
                        maxLength={1000}
                        className={`form-control ${
                           errors.question && "border-danger"
                        }`}
                        placeholder="Question"
                        onChange={handleFormChange}
                        defaultValue={formData.question}
                        style={{ height: "100px" }}></textarea>
                     <label
                        htmlFor="questionTextArea"
                        style={{ color: "gray" }}>
                        Question
                     </label>
                  </div>
                  {errors.question && errorHelper()}

                  {/* CHOICE 1 */}
                  <h3 className="mt-4">Choices</h3>
                  <label htmlFor="choice1" className="mb-2 mt-3">
                     Choice 1:
                  </label>
                  <div className="input-group">
                     <input
                        type="text"
                        value={formData.choice1}
                        name="choice1"
                        onChange={handleFormChange}
                        className={`form-control ${
                           errors.choice1 && "border-danger"
                        }`}
                        id="choice1"
                        placeholder="Enter choice value"
                     />
                     {errors.choice1 && errorAddOn()}
                  </div>
                  {errors.choice1 && errorHelper()}

                  {/* CHOICE 2 */}
                  <label htmlFor="choice2" className="mb-2 mt-3 d-block">
                     Choice 2:
                  </label>
                  <div className="input-group">
                     <input
                        type="text"
                        value={formData.choice2}
                        name="choice2"
                        onChange={handleFormChange}
                        className={`form-control ${
                           errors.choice2 && "border-danger"
                        }`}
                        id="choice2"
                        placeholder="Enter choice value"
                     />
                     {errors.choice2 && errorAddOn()}
                  </div>
                  {errors.choice2 && errorHelper()}

                  {/* CHOICE 3 */}
                  <label htmlFor="choice3" className="mb-2 mt-3 d-block">
                     Choice 3:
                  </label>
                  <div className="input-group">
                     <input
                        type="text"
                        className={`form-control ${
                           errors.choice3 && "border-danger"
                        }`}
                        value={formData.choice3}
                        name="choice3"
                        onChange={handleFormChange}
                        id="choice3"
                        placeholder="Enter choice value"
                     />
                     {errors.choice3 && errorAddOn()}
                  </div>
                  {errors.choice3 && errorHelper()}

                  {/* CHOICE 4 */}
                  <label htmlFor="choice4" className="mb-2 mt-3 d-block">
                     Choice 4:
                  </label>
                  <div className="input-group">
                     <input
                        type="text"
                        className={`form-control ${
                           errors.choice4 && "border-danger"
                        }`}
                        value={formData.choice4}
                        name="choice4"
                        onChange={handleFormChange}
                        id="choice4"
                        placeholder="Enter choice value"
                     />
                     {errors.choice4 && errorAddOn()}
                  </div>
                  {errors.choice4 && errorHelper()}

                  {/* ANSWER */}
                  <label htmlFor="correct_answer" className="mb-2 mt-3 d-block">
                     Correct Answer:
                  </label>
                  <select
                     id="correct_answer"
                     className={`form-select ${
                        errors.answer && "border-danger"
                     }`}
                     value={formData.answer}
                     name="answer"
                     onChange={handleFormChange}>
                     <option value="none" disabled hidden>
                        Select an option
                     </option>
                     <option value={1}>Choice 1</option>
                     <option value={2}>Choice 2</option>
                     <option value={3}>Choice 3</option>
                     <option value={4}>Choice 4</option>
                  </select>
                  {errors.answer && errorHelper()}

                  {/* POINTS */}
                  <label htmlFor="points_field" className="mb-2 mt-3 d-block">
                     Points:
                  </label>
                  <div className="input-group">
                     <input
                        id="points_field"
                        type="text"
                        className={`form-control ${css.points_input} ${
                           errors.points && "border-danger"
                        }`}
                        name="points"
                        value={formData.points}
                        onChange={handleTimeLimitInput}
                     />
                     {errors.points && errorAddOn()}
                  </div>
                  {errors.points && (
                     <small className="text-danger">
                        Invalid Input. Must be a positive integer.
                     </small>
                  )}

                  {/* COGNITIVE PROCESS DIMENSION */}
                  <label htmlFor="cpd_field" className="mb-2 mt-5 d-block">
                     Cognitive Process Dimension:
                  </label>
                  <select
                     id="cpd_field"
                     name="cpd"
                     className={`form-select ${errors.cpd && "border-danger"}`}
                     value={formData.cpd}
                     onChange={handleFormChange}>
                     <option value="none" disabled hidden>
                        Select an option
                     </option>
                     <option value="remember">Remember</option>
                     <option value="understand">Understand</option>
                     <option value="apply">Apply</option>
                     <option value="analyze">Analyze</option>
                     <option value="evaluate">Evaluate</option>
                     <option value="create">Create</option>
                  </select>
                  {errors.cpd && errorHelper()}

                  {/* KNOWLEDGE DIMENSION */}
                  <label htmlFor="kd_field" className="mb-2 mt-3 d-block">
                     Knowledge Dimension:
                  </label>
                  <select
                     id="kd_field"
                     name="kd"
                     className={`form-select ${errors.kd && "border-danger"}`}
                     value={formData.kd}
                     onChange={handleFormChange}
                     placeholder="select"
                     aria-label="Default select example">
                     <option value="none" disabled hidden>
                        Select an option
                     </option>
                     <option value="factual">Factual</option>
                     <option value="procedural">Procedural</option>
                     <option value="metacognitive">Metacognitive</option>
                  </select>
                  {errors.kd && errorHelper()}

                  {/* SUBMIT BUTTON */}
                  <div className="float-end mb-5 mt-5">
                     <button
                        type="button"
                        onClick={backToCreateExam}
                        className="btn btn-primary me-3 px-4 py-2">
                        Cancel
                     </button>
                     <button
                        className="btn btn-primary px-4 py-2"
                        type="submit">
                        Submit
                     </button>
                  </div>
               </form>
            </div>

            {/* MODAL FROM REACT-BOOTSTRAP LIBRARY */}
            <Modal show={isShownModal} onHide={handleModalClose}>
               <Modal.Header closeButton>
                  <Modal.Title>Discard changes?</Modal.Title>
               </Modal.Header>
               <Modal.Body>
                  Changes you made will not be saved once you leave this page.
               </Modal.Body>
               <Modal.Footer>
                  <Button variant="secondary" onClick={handleModalClose}>
                     Cancel
                  </Button>
                  <Button
                     variant="primary"
                     onClick={() => {
                        props.setisAddingQuestion(false);
                     }}>
                     Continue
                  </Button>
               </Modal.Footer>
            </Modal>
         </div>
      </>
   );
}
